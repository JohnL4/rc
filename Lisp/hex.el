;; Functions to transform text strings to hex dumps and back again.
;; Originally written to work w/strings as encoded into hex by MS-Windows's
;; registry editor.  Some keys (of type REG_EXPAND_SZ) are written as hex
;; dumps, which makes them harder to read and edit.  These functions provide a
;; bridge.

;; Usage:
;;
;; (from-hex-dump "hex(2):41,42,43,00")
;; (to-hex-dump "ABC")
;; M-x line-break-hex-dump
;;
;; $Header: v:/J80Lusk/CVSROOT/EmacsLisp/hex.el,v 1.4 2003/08/01 18:55:57 J80Lusk Exp $

(setq ascii-to-hex (make-vector 256 0))
(aset ascii-to-hex ?0 0)
(aset ascii-to-hex ?1 1)
(aset ascii-to-hex ?2 2)
(aset ascii-to-hex ?3 3)
(aset ascii-to-hex ?4 4)
(aset ascii-to-hex ?5 5)
(aset ascii-to-hex ?6 6)
(aset ascii-to-hex ?7 7)
(aset ascii-to-hex ?8 8)
(aset ascii-to-hex ?9 9)
(aset ascii-to-hex ?a 10)
(aset ascii-to-hex ?b 11)
(aset ascii-to-hex ?c 12)
(aset ascii-to-hex ?d 13)
(aset ascii-to-hex ?e 14)
(aset ascii-to-hex ?f 15)

(defun from-hex-dump (hex-dump)
  "Return a string generated by decoding the given hex-dump."
                                        ;Strip out leading cruft.
  (let ((sm (string-match "[0-9a-f][0-9a-f]," hex-dump))
        )
    (if sm
        (from-hex-seq (split-string (substring hex-dump sm) "[ \t\n\r\\,]+"))
      )
    )
  )

(defun to-hex-dump (string)
  "Return a hex-dump representing the given string."
  (concat "hex(2):"
          (mapconcat (lambda (c) (format "%02x" c)) string ",")
          ",00")
  )

(defun line-break-hex-dump ()
  "Format the hex dump on the current line like regedit does it by inserting
line breaks to keep the lines less than 80 characters long.  You could define
a shorter alias for this.  This could also be generalized by adding a regexp
for the characters on which to break, and a string to be inserted at the end
of the broken line."
  (interactive)
  (let (
        bol
        eol
        (do-format nil)
        )
    (save-excursion
      (end-of-line)
      (setq eol (point))
      (beginning-of-line)
      (setq bol (point))
      )
    (if (< 79 (- eol bol))
        (progn
          (beginning-of-line)
          (setq do-format t)
          )
      )
    (while (< 79 (- eol bol))
      (progn
        (forward-char 79)
        (search-backward ",")
        (forward-char)
        (insert "\\\n  ")
        (end-of-line)
        (setq eol (point))
        (beginning-of-line)
        (setq bol (point))
        )
      )
    (if do-format (forward-line))
    )
  )

(defun from-hex-seq (hex-seq)
  "Return a string generated by decoding the given sequence of ASCII codes.
Each element of the sequence is a string representation of the ASCII code in
hex."
  (let* ((i 0)
         (last-elt (elt hex-seq (- (length hex-seq) 1)))
         (retval (make-string (if (or (string= "00" last-elt)
                                      (string= "0" last-elt))
                                  (- (length hex-seq) 1)
                                (length hex-seq))
                              ?.))
         )
    (while (< i (length retval))
      (aset retval i (from-hex (elt hex-seq i)))
      (setq i (1+ i))
      )
    retval
    )
  )

(defun from-hex (hex-string)
  "Return the character whose ASCII code is given in hex by hex-string."
  (let ((i 0)
        (retval 0)
        )
    (while (< i (length hex-string))
      (setq retval (+ (* 16 retval)
                      (aref ascii-to-hex (aref hex-string i))))
      (setq i (1+ i))
      )
    retval
    )
  )

;; ----------------------------------------------------------------
;; $Log: hex.el,v $
;; Revision 1.4  2003/08/01 18:55:57  J80Lusk
;; line-break-hex-dump
;;
;; Revision 1.3  2003/08/01 18:20:47  J80Lusk
;; *** empty log message ***
;;
;; Revision 1.2  2003/08/01 18:18:59  J80Lusk
;; Add overview comment.
;;
;; Revision 1.1  2003/08/01 18:14:02  J80Lusk
;; *** empty log message ***
;;
